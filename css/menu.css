/* 
  @file Theming for menus.
  Note: This is generic theming for _all_ menus. Specific theming for specific
  menus can be achieved in individual menu/region files.
*/

.menu {
  padding-left: 0;
}

/* Only hide sub-menus if we have JS enabled. */
.js .menu .menu {
  display: none;
}

/*
  This is a button element placed inside the li to trigger the sub-menu.
*/
.menu__sub-menu-toggle {
  padding: 0 var(--spacing-smallest);
  width: var(--menu-sub-menu-toggle-width);
  height: var(--menu-sub-menu-toggle-height);
  border: 0;
  font-size: var(--menu-main-font-size);
  font-weight: var(--menu-main-font-weight);
}

.menu__sub-menu-toggle-icon {
  display: inline-block;
  transition: var(--transition-time);
}

.menu__sub-menu-toggle[aria-expanded="true"] .menu__sub-menu-toggle-icon {
  transform: rotate(var(--menu-item-toggle-icon-rotation));
}

.menu-item .menu-item > a {
  display: block;
}

.menu > .menu-item .menu-item--expanded {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  justify-content: space-between;
}

.menu > .menu-item .menu-item--expanded > .menu__sub-menu-toggle {
  /* 
    This margin top calc is created to take stock of the font-size of the main menu
    item + it's line-height (hence the divide by 2).
  */
  margin-top: calc(var(--menu-main-font-size) / 2);
}

.menu > .menu-item .menu-item--expanded > a {
  width: calc(100% - var(--menu-sub-menu-toggle-width));
}

.menu > .menu-item .menu-item--expanded > .menu {
  width: 100%;
}

/* 2nd+ level sub-menu */
/*
  The relative here is to reset the absolute from above for anything after the 
  first level. Then we use float, to make sure that the following siblings are not
  hidden behind the currently expanded sub-menu item.
*/
.js .menu .menu .menu {
  position: relative;
  float: left;
}

/* 
  We have CSS here to go 5 levels deep. \
  Hopefully no one will be crazy enough to need this. 
*/

/* 1st level sub-menu links */
.js .menu .menu a {
  padding: var(--menu-item-padding);
}
.js .menu .menu .menu a {
  padding-right: calc(var(--menu-item-padding) * 2);
  padding-left: calc(var(--menu-item-padding) * 2);
}
/* 3rd level sub-menu links */
.js .menu .menu .menu .menu a {
  padding-right: calc(var(--menu-item-padding) * 3);
  padding-left: calc(var(--menu-item-padding) * 3);
}
/* 4th level sub-menu links */
.js .menu .menu .menu .menu .menu a {
  padding-right: calc(var(--menu-item-padding) * 4);
  padding-left: calc(var(--menu-item-padding) * 4);
}
/* 5th level sub-menu links */
.js .menu .menu .menu .menu .menu .menu a {
  padding-right: calc(var(--menu-item-padding) * 5);
  padding-left: calc(var(--menu-item-padding) * 5);
}

@media screen and (min-width: 48rem) {
  .js .menu--menu-level-0 > .menu-item {
    position: relative;
    z-index: 1;
  }
  
  /* 1st level sub-menu */
  .js .menu .menu {
    position: absolute;
    left: 0;
    min-width: var(--menu-sub-menu-min-width);
  }

  /* We want to make sure any sub-items on the last menu item do not overflow the screen. */
  .js .menu--menu-level-0 > .menu-item:last-child .menu {
    right: 0;
    left: unset;
  }
}